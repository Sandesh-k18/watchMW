<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Welcome to Movie Search</title>
    <link href="/home.css" rel="stylesheet" />
    <!-- Place this script in the <head> section of your EJS files (e.g., home.ejs, search.ejs, movie_details.ejs, login.ejs, register.ejs) -->
    <script type="module">
      // Import Firebase services
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
      import {
        getAuth,
        signInAnonymously,
        signInWithCustomToken,
        onAuthStateChanged,
      } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
      import {
        getFirestore,
        doc,
        getDoc,
        setDoc,
        collection,
        query,
        where,
        addDoc,
        getDocs,
        deleteDoc,
        onSnapshot,
      } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

      // Global variables to hold Firebase instances and user state
      let app;
      let db;
      let auth;
      let userId = null; // Stores the current user's ID
      let isAuthReady = false; // Flag to indicate if auth state has been checked

      // Function to show a custom message box (re-using your existing function)
      function showMessageBox(title, message) {
        const messageBox = document.getElementById("messageBox");
        const messageTitle = document.getElementById("messageTitle");
        const messageContent = document.getElementById("messageContent");
        if (messageBox && messageTitle && messageContent) {
          messageTitle.textContent = title;
          messageContent.textContent = message;
          messageBox.classList.add("show");
        } else {
          console.error("Message box elements not found:", title, message);
        }
      }

      // Function to hide the custom message box (re-using your existing function)
      function hideMessageBox() {
        const messageBox = document.getElementById("messageBox");
        if (messageBox) {
          messageBox.classList.remove("show");
        }
      }

      // Initialize Firebase and set up authentication
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          // Retrieve Firebase config from environment variable (Canvas provides __firebase_config)
          // For local development, you'd use process.env.FIREBASE_CONFIG parsed on the server
          const firebaseConfig = JSON.parse(`<%- firebaseConfig %>`);
          const appId = `<%- __app_id %>`;
          const initialAuthToken = `<%- __initial_auth_token %>`; // Fallback for local testing

          if (Object.keys(firebaseConfig).length === 0) {
            console.error("Firebase config is empty or not provided.");
            showMessageBox(
              "Firebase Error",
              "Firebase configuration is missing. Please check your .env file or Canvas setup."
            );
            return;
          }

          // Initialize Firebase App
          app = initializeApp(firebaseConfig);
          db = getFirestore(app);
          auth = getAuth(app);

          // Set up authentication state listener
          onAuthStateChanged(auth, async (user) => {
            if (user) {
              // User is signed in.
              userId = user.uid;
              console.log("Firebase: User signed in:", userId);
              // You might want to update UI elements here to show logged-in state
            } else {
              // User is signed out.
              userId = null;
              console.log("Firebase: User signed out.");
              // You might want to update UI elements here to show logged-out state
            }
            isAuthReady = true; // Auth state has been determined
            // Any Firestore operations that depend on auth state can now proceed
          });

          // Sign in with custom token if provided (from Canvas environment)
          // Otherwise, sign in anonymously for basic access
          if (
            typeof __initial_auth_token !== "undefined" &&
            __initial_auth_token
          ) {
            await signInWithCustomToken(auth, __initial_auth_token);
            console.log("Firebase: Signed in with custom token.");
          } else {
            await signInAnonymously(auth);
            console.log("Firebase: Signed in anonymously.");
          }
        } catch (error) {
          console.error("Firebase initialization failed:", error);
          showMessageBox(
            "Firebase Error",
            `Failed to initialize Firebase: ${error.message}. Check your console.`
          );
        }
      });

      // Attach hideMessageBox to the close button if it exists
      const closeMessageBoxButton = document.getElementById("closeMessageBox");
      if (closeMessageBoxButton) {
        closeMessageBoxButton.addEventListener("click", hideMessageBox);
      }

      // Expose global variables for other scripts to use (optional, but convenient for EJS)
      window.firebaseApp = app;
      window.firestoreDb = db;
      window.firebaseAuth = auth;
      window.getUserId = () => userId; // Function to get current user ID
      window.isAuthReady = () => isAuthReady; // Function to check if auth is ready
    </script>
  </head>
  <body>
    <nav class="navbar">
      <div class="nav-container">
        <a href="/" class="nav-link">Home</a>
        <a href="/list" class="nav-link">List</a>
        <a href="/about" class="nav-link">About</a>
        <a href="/contact" class="nav-link">Contact</a>
        <a href="/faq" class="nav-link">FAQ</a>
        <a href="/user/login" class="nav-link">Get Started</a>
      </div>
    </nav>

    <div class="content-container">
      <h1>Discover Your Next Favorite Movie!</h1>
      <p>
        Welcome to our comprehensive movie search platform. Dive into a world of
        cinematic wonders, from timeless classics to the latest blockbusters.
      </p>
      <p>
        Easily find detailed information, stunning posters, and insightful
        overviews for millions of movies, powered by The Movie Database (TMDB).
      </p>

      <a href="/search" class="call-to-action">Start Searching Now!</a>

      <ul class="feature-list">
        <li class="feature-item">
          <h3>Vast Movie Database</h3>
          <p>
            Access an extensive collection of movies with up-to-date
            information, thanks to our integration with TMDB.
          </p>
        </li>
        <li class="feature-item">
          <h3>Detailed Information</h3>
          <p>
            Get movie titles, release dates, compelling overviews, and
            high-quality posters at your fingertips.
          </p>
        </li>
        <li class="feature-item">
          <h3>User-Friendly Interface</h3>
          <p>
            Enjoy a clean, intuitive, and responsive design that makes movie
            discovery a breeze on any device.
          </p>
        </li>
      </ul>
    </div>
  </body>
</html>
