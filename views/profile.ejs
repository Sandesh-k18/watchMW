<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            color: #333;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 0;
            padding-bottom: 2rem;
            padding-left: 1rem;
            padding-right: 1rem;
        }
        /* Navigation Bar Styles */
        .navbar {
            width: 100%;
            background-color: #333;
            padding: 1rem 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            margin-bottom: 2rem;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: center;
            gap: 2rem;
        }
        .nav-link {
            color: #ffffff;
            text-decoration: none;
            font-weight: 600;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        .nav-link:hover {
            background-color: #555;
            color: #fff;
        }
        .logout-button {
            background-color: #dc3545; /* Red for logout */
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .logout-button:hover {
            background-color: #c82333;
        }
        /* Hide class */
        .hidden {
            display: none !important;
        }
        .profile-container {
            width: 100%;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            padding: 2rem;
            background-color: #ffffff;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            margin-top: 2rem;
            text-align: center;
        }
        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 1.5rem;
        }
        p {
            font-size: 1.1rem;
            color: #555;
            margin-bottom: 1rem;
        }
        .user-id-display {
            font-weight: 600;
            color: #6366f1;
            word-break: break-all; /* Ensure long IDs wrap */
        }
        .return-link {
            display: inline-block;
            margin-top: 2rem;
            background-image: linear-gradient(to right, #6366f1, #8b5cf6);
            color: #ffffff;
            font-weight: 600;
            padding: 0.8rem 1.8rem;
            border-radius: 0.5rem;
            text-decoration: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .return-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(99, 102, 241, 0.4);
        }

        /* Custom Message Box styles (reused) */
        .message-box {
            background-color: #fff;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            display: none;
            max-width: 400px;
            width: 90%;
            text-align: left;
        }
        .message-box.show {
            display: block;
        }
        .message-box .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .message-box h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
        }
        .message-box .close-button {
            color: #6b7280;
            font-size: 1.5rem;
            font-weight: 700;
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
            line-height: 1;
            transition: color 0.2s;
        }
        .message-box .close-button:hover {
            color: #374151;
        }
        .message-box p {
            color: #374151;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <a href="/" class="nav-link">Home</a>
            <a href="/search" class="nav-link">Search Movies</a>
            <a href="/user/list" class="nav-link">My Watchlist</a>
            <a href="/about" class="nav-link">About</a>
            <a href="/contact" class="nav-link">Contact</a>
            <a href="/faq" class="nav-link">FAQ</a>
            <a href="/user/login" id="profileLink" class="nav-link">Profile</a>
            <button id="logoutButton" class="logout-button hidden">Logout</button>
        </div>
    </nav>

    <div class="profile-container">
        <h1>User Profile</h1>
        <p>Welcome to your profile page!</p>
        <p>Your User ID: <span id="displayUserId" class="user-id-display">Loading...</span></p>
        <p>This page will eventually contain more personalized information and settings.</p>
        <a href="/user/list" class="return-link">Go to My Watchlist</a>
    </div>

    <div id="messageBox" class="message-box hidden">
        <div class="header">
            <h3 id="messageTitle"></h3>
            <button id="closeMessageBox" class="close-button">&times;</button>
        </div>
        <p id="messageContent"></p>
    </div>

    <script type="module">
        // Import Firebase services
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js"; // Added signOut
        import { getFirestore, doc, getDoc, setDoc, collection, query, where, addDoc, getDocs, deleteDoc, onSnapshot, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Module-scoped variables for Firebase instances and user state
        let app;
        let db;
        let auth;
        let userId = null;
        let isAuthReady = false;
        let appId = 'default-app-id';

        // DOM elements
        const displayUserId = document.getElementById('displayUserId');
        const messageBox = document.getElementById('messageBox');
        const messageTitle = document.getElementById('messageTitle');
        const messageContent = document.getElementById('messageContent');
        const closeMessageBoxButton = document.getElementById('closeMessageBox');
        // Get references to navbar elements
        const profileLink = document.getElementById('profileLink');
        const logoutButton = document.getElementById('logoutButton');

        // Function to show a custom message box
        function showMessageBox(title, message, type = 'info') {
            messageTitle.textContent = title;
            messageContent.textContent = message;
            messageBox.classList.remove('hidden');
            // Optional: add type-specific styling
            if (type === 'error') {
                messageTitle.style.color = '#dc3545';
            } else if (type === 'success') {
                messageTitle.style.color = '#28a745';
            } else {
                messageTitle.style.color = '#1f2937';
            }
        }

        // Function to hide the custom message box
        function hideMessageBox() {
            messageBox.classList.add('hidden');
        }

        // Attach hideMessageBox to the close button
        if (closeMessageBoxButton) {
            closeMessageBoxButton.addEventListener('click', hideMessageBox);
        }

        // Function to update the UI based on authentication state
        function updateAuthUI(user) {
            if (user) {
                profileLink.textContent = 'Profile';
                profileLink.href = '/user/profile'; // Link to profile page when logged in
                profileLink.classList.remove('hidden');
                logoutButton.classList.remove('hidden');
            } else {
                profileLink.textContent = 'Login/Register';
                profileLink.href = '/user/login'; // Link to login page when logged out
                profileLink.classList.remove('hidden');
                logoutButton.classList.add('hidden');
            }
        }

        // Initialize Firebase and set up authentication
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const firebaseConfig = JSON.parse(`<%- firebaseConfig %>`);
                const initialAuthToken = `<%- __initial_auth_token %>`;
                appId = `<%- __app_id %>`;

                if (Object.keys(firebaseConfig).length === 0 || !firebaseConfig.apiKey || !firebaseConfig.authDomain) {
                    console.error("Firebase config is empty or missing critical properties (apiKey, authDomain).");
                    showMessageBox('Firebase Error', 'Firebase configuration is missing or incomplete. Please check your server setup and .env file.', 'error');
                    return;
                }

                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        console.log("Firebase: User signed in:", userId);
                        displayUserId.textContent = userId; // Display user ID
                    } else {
                        userId = null;
                        console.log("Firebase: User signed out.");
                        displayUserId.textContent = 'Not logged in. Please log in to view your profile.';
                    }
                    isAuthReady = true;
                    updateAuthUI(user); // Update UI based on auth state
                });

                if (!auth.currentUser) {
                    if (initialAuthToken && initialAuthToken !== 'null') {
                        await signInWithCustomToken(auth, initialAuthToken);
                        console.log("Firebase: Signed in with custom token.");
                    } else {
                        await signInAnonymously(auth);
                        console.log("Firebase: Signed in anonymously.");
                    }
                }

                // Add event listener for the logout button
                logoutButton.addEventListener('click', async () => {
                    try {
                        await signOut(auth);
                        showMessageBox('Success', 'You have been successfully logged out.', 'success');
                        // No explicit redirection here. onAuthStateChanged will update the UI.
                    } catch (error) {
                        console.error("Error signing out:", error);
                        showMessageBox('Error', `Failed to log out: ${error.message}. Please try again.`, 'error');
                    }
                });

            } catch (error) {
                console.error("Firebase initialization failed:", error);
                showMessageBox('Firebase Error', `Failed to initialize Firebase: ${error.message}. Check your console.`, 'error');
            }
        });
    </script>
</body>
</html>